name: Image

on: [push, pull_request]

env:
  RUST_VERSION: "1.86.0"

jobs:
  docker:
    name: Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug build context
        run: |
          echo "=== Build Context Analysis ==="
          echo "Repository size:"
          du -sh .
          echo ""
          echo "Largest directories:"
          du -sh * | sort -hr | head -10
          echo ""
          echo "Files in root directory:"
          ls -la
          echo ""
          echo "Target directory size (if exists):"
          du -sh target/ 2>/dev/null || echo "target/ not found"
          echo ""
          echo "Git directory size:"
          du -sh .git/ 2>/dev/null || echo ".git/ not found"

      - name: Build Docker image
        run: docker build --build-arg RUST_VERSION=${{ env.RUST_VERSION }} -t livecards-test .

      - name: Debug image analysis
        run: |
          echo "=== Image Analysis ==="
          echo "Image details:"
          docker images livecards-test
          echo ""
          echo "Image history:"
          docker history livecards-test
          echo ""
          echo "Image layers:"
          docker inspect livecards-test | jq '.[0].Layers' 2>/dev/null || echo "jq not available, showing raw inspect:"
          docker inspect livecards-test
          echo ""
          echo "Container filesystem analysis:"
          docker run --rm livecards-test find / -type f -size +1M 2>/dev/null | head -20
          echo ""
          echo "Largest files in container:"
          docker run --rm livecards-test du -ah / 2>/dev/null | sort -hr | head -20
          echo ""
          echo "Container root directory:"
          docker run --rm livecards-test ls -la /
          echo ""
          echo "Application directory contents:"
          docker run --rm livecards-test ls -la /usr/src/app/

      - name: Test image functionality
        run: |
          # Test server startup
          docker run -d --name test-server -p 8000:8000 livecards-test

          # Wait for server to start with retry logic
          for i in {1..30}; do
            if curl -f -s http://localhost:8000/health > /dev/null 2>&1; then
              echo "Server is ready after $i seconds"
              if [ $i -gt 8 ]; then
                echo "::warning::Server took longer than expected to start ($i seconds)"
              fi
              break
            fi

            if [ $i -eq 30 ]; then
              echo "::error::Server failed to start within 30 seconds"
              exit 1
            fi
            sleep 1
          done

          # Test health endpoint
          if ! curl -f http://localhost:8000/health; then
            echo "::error::Health endpoint test failed"
            exit 1
          fi

          # Test main endpoint (should redirect)
          if ! curl -f -I http://localhost:8000/; then
            echo "::error::Main endpoint test failed"
            exit 1
          fi

          # Test image generation
          if ! curl -f -o test-image.png -w "%{http_code}" http://localhost:8000/xevion/livecards | grep -q "200"; then
            echo "::error::Image generation test failed"
            exit 1
          fi

          # Verify it's a PNG file
          if ! file test-image.png | grep -q "PNG image data"; then
            echo "::error::Generated file is not a valid PNG image"
            exit 1
          fi

          # Clean up
          docker stop test-server
          docker rm test-server

      - name: Test image size
        run: |
          # Check that the image is reasonably sized
          IMAGE_SIZE=$(docker images livecards-test --format "{{.Size}}" | sed 's/[^0-9]//g')
          echo "Image size: ${IMAGE_SIZE}MB"

          # Fail if image is too large (>100MB)
          if [ "$IMAGE_SIZE" -gt 100 ]; then
            echo "::error::Image is too large: ${IMAGE_SIZE}MB"
            exit 1
          fi
