name: Image

on: [push, pull_request]

env:
  RUST_VERSION: "1.86.0"

jobs:
  docker:
    name: Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build --build-arg RUST_VERSION=${{ env.RUST_VERSION }} -t livecards-test .

      - name: Test image functionality
        run: |
          # Test server startup
          docker run -d --name test-server -p 8000:8000 livecards-test

          # Wait for server to start with retry logic
          for i in {1..30}; do
            if curl -f -s http://localhost:8000/health > /dev/null 2>&1; then
              echo "Server is ready after $i seconds"
              if [ $i -gt 8 ]; then
                echo "::warning::Server took longer than expected to start ($i seconds)"
              fi
              break
            fi

            if [ $i -eq 30 ]; then
              echo "::error::Server failed to start within 30 seconds"
              exit 1
            fi
            sleep 1
          done

          # Test health endpoint
          if ! curl -f http://localhost:8000/health; then
            echo "::error::Health endpoint test failed"
            exit 1
          fi

          # Test main endpoint (should redirect)
          if ! curl -f -I http://localhost:8000/; then
            echo "::error::Main endpoint test failed"
            exit 1
          fi

          # Test image generation
          if ! curl -f -o test-image.png -w "%{http_code}" http://localhost:8000/xevion/livecards | grep -q "200"; then
            echo "::error::Image generation test failed"
            exit 1
          fi

          # Verify it's a PNG file
          if ! file test-image.png | grep -q "PNG image data"; then
            echo "::error::Generated file is not a valid PNG image"
            exit 1
          fi

          # Clean up
          docker stop test-server
          docker rm test-server

      - name: Test image size
        run: |
          # Check that the image is reasonably sized
          IMAGE_SIZE_RAW=$(docker images livecards-test --format "{{.Size}}")
          echo "Raw image size: ${IMAGE_SIZE_RAW}"

          # Convert size to MB (handle both decimal and integer sizes)
          if [[ "$IMAGE_SIZE_RAW" =~ ([0-9]+)\.([0-9]+)MB ]]; then
            # Decimal size like "90.5MB" - convert to integer by rounding
            WHOLE_PART="${BASH_REMATCH[1]}"
            DECIMAL_PART="${BASH_REMATCH[2]}"
            # Round up if decimal part >= 5, otherwise round down
            if [ "${DECIMAL_PART}" -ge 5 ]; then
              IMAGE_SIZE=$((WHOLE_PART + 1))
            else
              IMAGE_SIZE="${WHOLE_PART}"
            fi
          elif [[ "$IMAGE_SIZE_RAW" =~ ([0-9]+)MB ]]; then
            # Integer size like "90MB"
            IMAGE_SIZE="${BASH_REMATCH[1]}"
          else
            echo "::error::Could not parse image size: ${IMAGE_SIZE_RAW}"
            exit 1
          fi

          echo "Parsed image size: ${IMAGE_SIZE}MB"

          # Fail if image is too large (>100MB)
          if [ "$IMAGE_SIZE" -gt 100 ]; then
            echo "::error::Image is too large: ${IMAGE_SIZE}MB"
            exit 1
          fi
